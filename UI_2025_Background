from dash import Dash, dcc, html, Output, Input, State
import pandas as pd
import base64
import io

# Initialize Dash app
app = Dash(__name__)

# Function to encode the JPEG image
def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')

# Encode the Geomagnetism JPEG image
encoded_image = encode_image("/Users/kathrynnlees/Downloads/Geomag.jpg")  # Adjust path as needed

# Website layout
app.layout = html.Div([
    html.H1("Machine Learning Image Reconstruction for Identifying Geophysical Anomalies",
            style={'textAlign': 'center', 'color': '#003366', 'marginTop': '20px'}),
    
    html.P(
        """Created by Airborne Insights""",
        style={'textAlign': 'center', 'maxWidth': '2000px', 'margin': 'auto', 'color': '#444'}
    ),
    
    html.H3("Upload Your Magnetic Survey Data", style={'textAlign': 'center', 'marginTop': '40px'}),
    
    dcc.Upload(
        id='upload-data',
        children=html.Button("Upload File", style={'backgroundColor': '#003366', 'color': 'white', 'padding': '10px', 'border': 'none'}),
        multiple=False,  # Allow only one file at a time
        style={'textAlign': 'center', 'marginTop': '20px'}
    ),

    # Footnote below Upload File button
    html.P("Upload only one file at a time.", style={'textAlign': 'center', 'color': '#777', 'fontSize': '12px'}),

    html.H3("Select Interpolation Method", style={'textAlign': 'center', 'marginTop': '40px'}),
    
    dcc.Dropdown(
        id='interpolation-method',
        options=[
            {'label': 'Linear', 'value': 'linear'},
            {'label': 'Cubic', 'value': 'cubic'},
            {'label': 'Nearest', 'value': 'nearest'}
        ],
        value='linear',  # Default selection
        clearable=False,
        style={'width': '50%', 'margin': 'auto', 'textAlign': 'center'}
    ),

    html.Div(id='selected-method', style={'textAlign': 'center', 'marginTop': '10px', 'color': '#003366'}),

    # "Process Data" button
    html.Div(style={'textAlign': 'center', 'marginTop': '40px'}, children=[
        html.Button("Process Data", id="process-button", n_clicks=0, 
                    style={'backgroundColor': '#28a745', 'color': 'white', 'padding': '10px 20px', 'border': 'none'})
    ]),

    html.Div(id='output-data', style={'textAlign': 'center', 'marginTop': '20px'}),

    # Display the Geomagnetism JPEG image spanning the full width
    html.Div(style={'position': 'relative', 'width': '100%', 'marginTop': '50px'}, children=[
        html.Img(
            src=f"data:image/jpeg;base64,{encoded_image}", 
            style={'width': '100%', 'height': 'auto'}
        )
    ])
])

# Function to handle uploaded files
def parse_contents(contents, filename, method):
    content_type, content_string = contents.split(',')
    decoded = base64.b64decode(content_string)

    if filename.endswith('.csv'):
        df = pd.read_csv(io.StringIO(decoded.decode('utf-8')))
        return html.Div([
            html.H5(f"Uploaded File: {filename}"),
            html.Pre(df.head().to_string(), style={'whiteSpace': 'pre-wrap', 'textAlign': 'left'}),  # Show first few rows
            html.H5(f"Processing using: {method.capitalize()} Interpolation")
        ])
    elif filename.endswith('.pdf'):
        return html.Div([html.H5(f"Uploaded PDF: {filename}")])
    elif filename.endswith('.xyz'):
        return html.Div([html.H5(f"Uploaded XYZ file: {filename}")])
    else:
        return html.Div(["Unsupported file format. Please upload a CSV, PDF, or XYZ file."])

# Callback to display selected interpolation method
@app.callback(
    Output('selected-method', 'children'),
    Input('interpolation-method', 'value')
)
def update_interpolation(method):
    return f"Selected Interpolation Method: {method.capitalize()}"

# Callback to process data when button is clicked
@app.callback(
    Output('output-data', 'children'),
    Input('process-button', 'n_clicks'),
    State('upload-data', 'contents'),
    State('upload-data', 'filename'),
    State('interpolation-method', 'value')
)
def process_data(n_clicks, contents, filename, method):
    if n_clicks > 0 and contents is not None:
        return parse_contents(contents, filename, method)
    elif n_clicks > 0:
        return html.Div("Please upload a file before processing.", style={'color': 'red'})
    return ""

# Run the website
if __name__ == '__main__':
    app.run_server(debug=True)
